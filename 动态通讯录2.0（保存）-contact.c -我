#define _CRT_SECURE_NO_WARNINGS 1

#include"contact.h"

//初始化
void InitContact(contact* ps)
{
	FILE* pf_Contact = fopen("Contact.txt", "rb");
	if (pf_Contact == NULL)
	{
		//第一次创建通讯录
		ps->size = 0;
		ps->capacity = 3;
		ps->data = (PeoInfo*)malloc(3 * sizeof(PeoInfo));
		if (ps->data == NULL)
		{
		printf("%s\n", strerror(errno));
		}
	}
	else
	{
		//通讯录已经有数据在文件中，二进制读出通讯录信息
		fread(ps, sizeof(contact), 1, pf_Contact);
		//动态开辟空间存好友的信息
		ps->data = (PeoInfo*)malloc((ps->capacity)*sizeof(PeoInfo));
		FILE* pf_PeoInfo = fopen("PeoInfo.txt", "rb");
		fread(ps->data, sizeof(PeoInfo), ps->size, pf_PeoInfo);
		printf("读取数据成功\n");
		fclose(pf_PeoInfo);
		pf_PeoInfo = NULL;
		fclose(pf_Contact);
		pf_Contact = NULL;
	}
}

//检查空间
void CheckCapacity(contact* ps)
{
	if (ps->size == ps->capacity)
	{
		PeoInfo* ptr = (PeoInfo*)realloc(ps->data, (ps->capacity + 2)*sizeof(PeoInfo));
		if (ptr != NULL)
		{
			ps->data = ptr;
			ps->capacity += 2;
			printf("增容成功\n");
		}
		else
		{
			printf("%s\n", strerror(errno));
		}
	}
}

//添加好友
void AddContact(contact* ps)
{
	//判断空间是否满了1.满了就加两个 2.没满啥也不做
	CheckCapacity(ps);

	printf("请输入好友名字:>");
	scanf("%s", ps->data[ps->size].name);
	printf("请输入好友年龄:>");
	scanf("%d", &(ps->data[ps->size].age));
	printf("请输入好友性别:>");
	scanf("%s", ps->data[ps->size].sex);
	printf("请输入好友电话:>");
	scanf("%s", ps->data[ps->size].tele);
	printf("请输入好友地址:>");
	scanf("%s", ps->data[ps->size].addrs);
	printf("请输入好友备注:>");
	scanf("%s", ps->data[ps->size].memo);

	ps->size++;
	printf("添加成功\n");
}
//展示列表
void ShowContact(const contact* ps)
{
	if (!ps->size)
	{
		printf("通讯录为空\n");
	}
	else
	{
		int i = 0;
		printf("%-10s\t%-3s\t%-4s\t%-15s\t%-20s\t%-10s\n", "姓名", "年龄", "性别", "电话", "地址", "备注");
		for (i = 0; i < ps->size; i++)
		{
			printf("%-10s\t%-3d\t%-4s\t%-15s\t%-20s\t%-10s\n",ps->data[i].name,
				ps->data[i].age,
				ps->data[i].sex,
				ps->data[i].tele,
				ps->data[i].addrs,
				ps->data[i].memo);
		}
	}
}
//查找函数
static int FindByName(const contact* ps, char name[MAX_NAME])
{
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		if (!strcmp(ps->data[i].name, name))
		{
			return i;//返回下标
		}
	}
	return -1;//找不到
}
//好友删除
void DelContact(contact* ps)
{
	if (!ps->size)
	{
		printf("通讯录为空\n");
	}
	else
	{
		char name[MAX_NAME];
		printf("请输入想要删除的好友名字:>");
		scanf("%s", name);
		int pos = FindByName(ps, name);
		if (pos == -1)
		{
			printf("找不到\n");
		}
		else
		{
			int i = 0;
			for (i = pos; i < ps->size - 1; i++)
			{
				struct PeoInfo tmp = ps->data[i + 1];
				ps->data[i + 1] = ps->data[i];
				ps->data[i] = tmp;
			}
			ps->size--;
			printf("删除成功\n");
		}
	}
}
//好友查找
void SearchContact(const contact* ps)
{
	if (!ps->size)
	{
		printf("通讯录为空\n");
	}
	else
	{
		char name[MAX_NAME];
		printf("请输入想要查找的好友名字:>");
		scanf("%s", name);
		int pos = FindByName(ps, name);
		if (pos == -1)
		{
			printf("找不到\n");
		}
		else
		{
			printf("%-10s\t%-3s\t%-4s\t%-15s\t%-20s\t%-10s\n", "姓名", "年龄", "性别", "电话", "地址", "备注");
			printf("%-10s\t%-3d\t%-4s\t%-15s\t%-20s\t%-10s\n", ps->data[pos].name,
				ps->data[pos].age,
				ps->data[pos].sex,
				ps->data[pos].tele,
				ps->data[pos].addrs,
				ps->data[pos].memo);
		}
	}
}
//修改好友信息
void ModifyContact(contact* ps)
{
	if (!ps->size)
	{
		printf("通讯录为空\n");
	}
	else
	{
		char name[MAX_NAME];
		printf("请输入想要修改的好友名字:>");
		scanf("%s", name);
		int pos = FindByName(ps, name);
		if (pos == -1)
		{
			printf("找不到\n");
		}
		else
		{
			printf("请输入好友名字:>");
			scanf("%s", ps->data[pos].name);
			printf("请输入好友年龄:>");
			scanf("%d", &(ps->data[pos].age));
			printf("请输入好友性别:>");
			scanf("%s", ps->data[pos].sex);
			printf("请输入好友电话:>");
			scanf("%s", ps->data[pos].tele);
			printf("请输入好友地址:>");
			scanf("%s", ps->data[pos].addrs);
			printf("请输入好友备注:>");
			scanf("%s", ps->data[pos].memo);
			printf("修改成功\n");
		}
	}
}
//名字的比较方法
int cmp_name(const void* e1, const void* e2)
{
	return strcmp(((PeoInfo*)e1)->name, ((PeoInfo*)e2)->name);
}
//年龄的比较方法
int cmp_age(const void* e1, const void* e2)
{
	return ((PeoInfo*)e1)->age - ((PeoInfo*)e2)->age;
}
//排序好友信息
void SortContact(contact* ps)
{
	if (!ps->size)
	{
		printf("通讯录为空\n");
	}
	else
	{
		char select[MAX_NAME];
		printf("选择排序方法 姓名/年龄:>");
		scanf("%s", select);
		if (!strcmp("姓名", select))
		{
			qsort(ps->data, ps->size, sizeof(ps->data[0]), cmp_name);
			printf("排序成功\n");
		}
		if (!strcmp("年龄", select))
		{
			qsort(ps->data, ps->size, sizeof(ps->data[0]), cmp_age);
			printf("排序成功\n");
		}
	}
}

//动态内存销毁函数
void DestroyContact(contact* ps)
{
	free(ps->data);
	ps->data = NULL;
}

//通讯录保存函数
void SaveContact(contact* ps)
{
	//写入contact通讯录的信息
	FILE* pf_Contact = fopen("Contact.txt", "wb");
	if (!pf_Contact)
	{
		printf("%s\n", strerror(errno));
		return;
	}
	fwrite(ps, sizeof(contact), 1, pf_Contact);
	fclose(pf_Contact);
	pf_Contact = NULL;
	//写入PeoInfo好友信息
	FILE* pf_PeoInfo = fopen("PeoInfo.txt", "wb");
	if (!pf_PeoInfo)
	{
		printf("%s\n", strerror(errno));
		return;
	}
	fwrite(ps->data, sizeof(PeoInfo), ps->size, pf_PeoInfo);
	fclose(pf_PeoInfo);
	pf_PeoInfo = NULL;
	printf("保存数据成功\n");
}
